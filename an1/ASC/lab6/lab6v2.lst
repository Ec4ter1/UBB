     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 EAFF9100D0FF7F00            s dw -22, +145, -48, +127
    14                                      len equ ($-s)/2
    15 00000008 00<rept>                    d times len db 0
    16                                  
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20 00000000 B904000000                      mov ecx, len; lungimea sirului
    21 00000005 BE00000000                      mov esi, 0; index pt s=> i=0
    22 0000000A BF00000000                      mov edi, 0; index pt d=> j=0
    23 0000000F E344                            jecxz final
    24                                          repeta:
    25 00000011 51                                  push ecx
    26                                              ; citim wordul curent
    27 00000012 668B86[00000000]                    mov ax, word[s+esi]
    28                                              ;afla, daca negativ sau pozitiv
    29 00000019 66D1C0                              rol ax, 1
    30 0000001C B908000000                          mov ecx, 8; vom repeta ciclul numara de 16 ori
    31 00000021 B300                                mov bl, 0; suma
    32 00000023 720D                                jc negativ
    33                                              ;e pozitiv
    34 00000025 66D1C8                              ror ax, 1
    35                                              ;numaram 1 din nr pozitive
    36                                              numara1:
    37 00000028 66D1E8                                  shr ax, 1; bitul care iese e retinut in CF
    38 0000002B 80D300                                  adc bl, 0; BL = BL + CF
    39 0000002E E2F8                                    loop numara1
    40 00000030 7316                                jnc sf_bucla
    41                                              negativ:
    42 00000032 66D1C8                              ror ax, 1
    43 00000035 B910000000                          mov ecx, 16
    44                                              ;numaram 0 din nr negative
    45                                              numara0:
    46                                                  ;aflam mai intai cati biti de 1 sunt
    47 0000003A 66D1E8                                  shr ax, 1; bitul care iese e retinut in CF
    48 0000003D 80D300                                  adc bl, 0; BL = BL + CF
    49 00000040 E2F8                                    loop numara0
    50                                              ;scadem din nr total de biti bitii de 1
    51 00000042 B210                                mov dl, 16;
    52 00000044 28DA                                sub dl, bl
    53 00000046 88D3                                mov bl, dl
    54                                              sf_bucla:
    55 00000048 889F[08000000]                      mov [d+edi], bl
    56 0000004E 47                                  inc edi; j++
    57 0000004F 46                                  inc esi; i++
    58 00000050 46                                  inc esi; i++ pt ca avem word
    59 00000051 F8                                  clc; clear carry
    60 00000052 59                                  pop ecx
    61 00000053 E2BC                            loop repeta
    62                                          final:
    63                                      
    64                                          ; exit(0)
    65 00000055 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    66 00000057 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
