     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                                            
    12                                  ;Se da un sir de cuvinte s. Sa se construiasca sirul de octeti d, astfel incat d sa contina pentru fiecare pozitie din s:
    13                                  ;- numarul de biti de 0, daca numarul este negativ
    14                                  ;- numarul de biti de 1, daca numarul este pozitiv
    15                                  ;Exemplu:
    16                                  ;s: -22, 145, -48, 127
    17                                  ;in binary:
    18                                  ;1111111111101010, 10010001, 1111111111010000, 1111111
    19                                  ;d: 3, 3, 5, 7
    20                                  ; our data is declared here (the variables needed by our program)
    21                                  segment data use32 class=data
    22 00000000 EAFF9100D0FF7F00            s dw -22, 145, -48, 127
    23                                      len equ ($-s)/2
    24 00000008 00<rept>                    d times len db 0
    25                                      
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29 00000000 B904000000                      mov ecx, len; lungimea sirului
    30 00000005 E33E                            jecxz final
    31 00000007 FC                              cld
    32 00000008 BE[00000000]                    mov esi, s
    33 0000000D BF[08000000]                    mov edi, d
    34                                          repeta:
    35 00000012 51                                  push ecx
    36                                              ; citim wordul curent
    37 00000013 66AD                                lodsw; Ax <- <DS:ESI> si inc ESI
    38                                              ;afla, daca negativ sau pozitiv
    39 00000015 66D1C0                              rol ax, 1
    40 00000018 B910000000                          mov ecx, 16; vom repeta ciclul numara de 16 ori
    41 0000001D B300                                mov bl, 0; suma
    42 0000001F 720D                                jc negativ
    43                                              ;e pozitiv
    44 00000021 66D1C8                              ror ax, 1
    45                                              ;numaram 1 din nr pozitive
    46                                              numara1:
    47 00000024 66D1E8                              shr ax, 1; bitul care iese e retinut in CF
    48 00000027 80D300                              adc bl, 0; BL = BL + CF
    49 0000002A E2F8                                loop numara1
    50 0000002C 7311                                jnc sf_bucla
    51                                              negativ:
    52 0000002E 66D1C8                              ror ax, 1
    53                                              ;numaram 0 din nr negative
    54                                              numara0:
    55                                              ;aflam mai intai cati biti de 1 sunt
    56 00000031 66D1E8                              shr ax, 1; bitul care iese e retinut in CF
    57 00000034 80D300                              adc bl, 0; BL = BL + CF
    58 00000037 E2F8                                loop numara0
    59                                              ;scadem din nr total de biti bitii de 1
    60 00000039 B210                                mov dl, 16;
    61 0000003B 28DA                                sub dl, bl
    62 0000003D 88D3                                mov bl, dl
    63                                              sf_bucla:
    64 0000003F 88D8                                mov al, bl
    65 00000041 AA                                  stosb ;<ES:EDI> <- AL si inc EDI
    66 00000042 59                                  pop ecx
    67 00000043 E2CD                            loop repeta
    68                                          final:
    69                                          ; exit(0)
    70 00000045 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    71 00000047 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
