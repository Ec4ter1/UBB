     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ;19. (e + g) * 2 / (a * c) + (h â€“ f) + b * 3
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 01                          a db 1
    15 00000001 02                          b db 2
    16 00000002 03                          c db 3
    17 00000003 0400                        e dw 4
    18 00000005 0500                        f dw 5
    19 00000007 0200                        g dw 2
    20 00000009 0700                        h dw 7
    21                                      
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25 00000000 66A1[03000000]                  mov ax, [e]; ax = 0004h
    26 00000006 660305[07000000]                add ax, [g]; ax = 0006h
    27 0000000D 66BB0200                        mov bx, 2
    28 00000011 66F7E3                          mul bx; ax:dx = 000Ch
    29 00000014 6650                            push ax
    30 00000016 6652                            push dx
    31 00000018 A0[00000000]                    mov al, [a]; al=01h
    32 0000001D F625[02000000]                  mul byte [c]; ax = 03h
    33 00000023 6689C3                          mov bx, ax
    34 00000026 665A                            pop dx
    35 00000028 6658                            pop ax
    36 0000002A 66F7F3                          div bx; dx:ax = 04h
    37 0000002D 668B1D[09000000]                mov bx, [h]; bx = 0007h
    38 00000034 662B1D[05000000]                sub bx, [f]; bx = 0002h
    39 0000003B 66B90000                        mov cx, 0
    40 0000003F 6601D8                          add ax, bx
    41 00000042 6611CA                          adc dx, cx
    42 00000045 6650                            push ax
    43 00000047 6652                            push dx
    44 00000049 8A1D[01000000]                  mov bl, [b]
    45 0000004F B003                            mov al, 3
    46 00000051 F6E3                            mul bl; ax = 0006h
    47 00000053 6689C3                          mov bx, ax
    48 00000056 66B90000                        mov cx, 0
    49 0000005A 665A                            pop dx
    50 0000005C 6658                            pop ax
    51 0000005E 6601D8                          add ax, bx
    52 00000061 6611CA                          adc dx, cx
    53                                      
    54                                          ; exit(0)
    55 00000064 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    56 00000066 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
