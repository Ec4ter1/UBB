     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, scanf, printf, fprintf              
     8                                  import exit msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll
    11                                  import fopen msvcrt.dll    
    12                                  import fprintf msvcrt.dll; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17 00000000 6669736965722E7478-         nume_fisier db "fisier.txt", 0
    17 00000009 7400               
    18 0000000B 7700                        mod_access db "w", 0
    19 0000000D FFFFFFFF                    descriptor dd -1
    20 00000011 256400                      format_d db "%d", 0
    21 00000014 257800                      format_h db "%x", 0
    22 00000017 257300                      format_s db "%s", 0
    23                                      numar equ 30
    24 0000001A 00<rept>                    sir times numar db 0
    25 00000038 00000000                    n dd 0
    26 0000003C 00000000                    m dd 0
    27 00000040 6E7220256400                text db "nr %d", 0
    28                                  
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32 00000000 68[0B000000]                    push dword mod_access
    33 00000005 68[00000000]                    push dword nume_fisier
    34 0000000A FF15[00000000]                  call [fopen]
    35 00000010 83C408                          add esp, 4*2
    36                                          
    37 00000013 A3[0D000000]                    mov [descriptor], eax
    38 00000018 83F800                          cmp eax, 0
    39 0000001B 745C                            je final
    40                                          
    41 0000001D 68[38000000]                    push dword n
    42 00000022 68[11000000]                    push dword format_d
    43 00000027 FF15[00000000]                  call [scanf]
    44 0000002D 83C408                          add esp, 4*2
    45                                          
    46 00000030 8B0D[38000000]                  mov ecx,[n]
    47 00000036 BF[1A000000]                    mov edi, sir
    48 0000003B FC                              cld
    49                                          repeta:
    50 0000003C 51                                  push ecx
    51                                              
    52 0000003D 68[3C000000]                        push dword m
    53 00000042 68[14000000]                        push format_h
    54 00000047 FF15[00000000]                      call [scanf]
    55 0000004D 83C408                              add esp, 4*2
    56                                              
    57 00000050 668B1D[3C000000]                    mov bx, [m]
    58 00000057 38DF                                cmp bh, bl; ah-al =?0
    59 00000059 7705                                ja bhm
    60                                              ;il punm pe bl
    61 0000005B 88D8                                mov al, bl
    62 0000005D AA                                  stosb;edi<=al
    63                                              ; cbw
    64                                              ; cwde
    65                                              ; push eax
    66                                              ; push dword [descriptor]
    67                                              ; call [fprintf]
    68                                              ; add esp, 4*2
    69                                              
    70 0000005E EB03                                jmp mai_incolo
    71                                              bhm:
    72                                              ;il punem pe bh
    73 00000060 88F8                                mov al, bh
    74 00000062 AA                                  stosb
    75                                              ; cbw
    76                                              ; cwde
    77                                              ; push eax
    78                                              ; push dword [descriptor]
    79                                              ; call [fprintf]
    80                                              ; add esp, 4*2
    81                                              
    82                                              mai_incolo:
    83                                              
    84 00000063 59                                  pop ecx
    85 00000064 E2D6                            loop repeta
    86                                          
    87 00000066 68[1A000000]                    push dword sir
    88 0000006B 68[17000000]                    push format_s
    89 00000070 FF15[00000000]                  call [printf]
    90 00000076 83C408                          add esp, 4*2
    91                                          final:
    92                                          ; exit(0)
    93 00000079 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    94 0000007B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
