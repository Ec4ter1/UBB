     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  
     8                                  extern exit, printf               ; tell nasm that exit exists even if we won't be defining it
     9                                  import exit msvcrt.dll
    10                                  import printf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 FFFFFFFF40E20100FF-         a dd -1, 123456, 0abcdeffh, 0abcdeffh, 0
    15 00000009 DEBC0AFFDEBC0A0000-
    15 00000012 0000               
    16 00000014 536972756C20652025-         format_s db "Sirul e %s", 0
    16 0000001D 7300               
    17 0000001F 256400                      format db "%d", 0
    18 00000022 2000                        spatiu db " ", 0
    19                                      l equ ($-a)/4
    20 00000024 00000000<rept>              b times l dd 00000000h
    21                                      
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      suma:
    26 00000000 8B4C240C                        mov ecx, [esp+12] ;l 
    27 00000004 E350                            jecxz final
    28 00000006 FC                              cld
    29 00000007 8B742408                        mov esi, [esp+8];a
    30 0000000B 8B7C2404                        mov edi, [esp+4];b
    31                                          
    32                                          repo3:
    33 0000000F 51                                  push ecx
    34                                              ;mov eax, [a+esi]
    35 00000010 AD                                  lodsd
    36                                       
    37                                              ;suma unui elem
    38 00000011 B908000000                          mov ecx, 8
    39 00000016 BA00000000                          mov edx, 0
    40                                              repi2:
    41 0000001B 51                                      push ecx
    42 0000001C B904000000                              mov ecx, 4
    43 00000021 BB00000000                              mov ebx, 0
    44                                                  repeta:
    45 00000026 D1C8                                        ror eax, 1
    46 00000028 D0D3                                        rcl bl, 1
    47 0000002A E2FA                                    loop repeta
    48 0000002C 01DA                                    add edx, ebx
    49 0000002E 59                                      pop ecx
    50 0000002F E2EA                                loop repi2
    51 00000031 60                                  pushad
    52 00000032 52                                  push edx
    53 00000033 68[1F000000]                        push dword format
    54 00000038 FF15[00000000]                      call [printf]
    55 0000003E 83C408                              add esp, 4*2
    56                                              
    57 00000041 68[22000000]                        push dword spatiu
    58 00000046 FF15[00000000]                      call [printf]
    59 0000004C 83C404                              add esp, 4
    60 0000004F 61                                  popad
    61 00000050 89D0                                mov eax, edx
    62 00000052 AB                                  stosd
    63                                              ; mov [b+edi], edx
    64                                              ; inc edi
    65                                              ; inc edi
    66                                              ; inc edi
    67                                              ; inc edi
    68                                              
    69                                              ; inc esi
    70                                              ; inc esi
    71                                              ; inc esi
    72                                              ; inc esi
    73                                              
    74 00000053 59                                  pop ecx
    75 00000054 E2B9                            loop repo3
    76                                          final:
    77 00000056 C20C00                          ret 4*3
    78                                          
    79                                      start:
    80 00000059 6A09                            push l
    81 0000005B 68[00000000]                    push a
    82 00000060 68[24000000]                    push b
    83 00000065 E896FFFFFF                      call suma
    84                                          
    85 0000006A 68[24000000]                    push dword b
    86 0000006F 68[14000000]                    push dword format_s
    87 00000074 FF15[00000000]                  call [printf]
    88                                          
    89                                      
    90                                          ; exit(0)
    91 0000007A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    92 0000007C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
