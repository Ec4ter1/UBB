     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fread, printf, fprintf             ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll  
    10                                  import fclose msvcrt.dll
    11                                  import fread msvcrt.dll
    12                                  import printf msvcrt.dll
    13                                  import fprintf msvcrt.dll   ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  ;24. Se dau un nume de fisier si un text (definite in segmentul de date). Textul contine litere mici, litere mari, cifre si caractere speciale. Sa se inlocuiasca toate CIFRELE din textul dat cu caracterul 'C'. Sa se
    16                                  
    17                                  ; our data is declared here (the variables needed by our program)
    18                                  segment data use32 class=data
    19 00000000 6C6162385F742E7478-         nume_fisier db "lab8_t.txt", 0  ; numele fisierului care va fi creat
    19 00000009 7400               
    20 0000000B 6C6162385F772E7478-         nume_fisier2 db "lab8_w.txt", 0
    20 00000014 7400               
    21 00000016 7200                        mod_acces db "r", 0
    22 00000018 7700                        mod_acces2 db "w", 0
    23 0000001A FFFFFFFF                    descriptor_fis dd -1
    24                                      len equ 100                                    
    25 0000001E 00<rept>                    text times len db 0 
    26 00000082 00<rept>                    d times len db 0
    27 000000E6 54657874756C206573-         format db "Textul este: %s.", 0
    27 000000EF 74653A2025732E00   
    28                                  
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32 00000000 68[16000000]                    push dword mod_acces     
    33 00000005 68[00000000]                    push dword nume_fisier
    34 0000000A FF15[00000000]                  call [fopen]
    35 00000010 83C408                          add esp, 4*2                ; eliberam parametrii de pe stiva
    36                                  
    37 00000013 A3[1A000000]                    mov [descriptor_fis], eax   ; salvam valoarea returnata de fopen in variabila descriptor_fis
    38                                          
    39 00000018 83F800                          cmp eax, 0     ; verificam daca functia fopen a creat cu succes fisierul (daca EAX != 0)
    40 0000001B 0F849E000000                    je final
    41                                          
    42 00000021 FF35[1A000000]                  push dword [descriptor_fis]
    43 00000027 6A64                            push dword len
    44 00000029 6A01                            push dword 1
    45 0000002B 68[1E000000]                    push dword text        
    46 00000030 FF15[00000000]                  call [fread]
    47 00000036 83C410                          add esp, 4*4
    48                                          
    49 00000039 68[1E000000]                    push dword text
    50 0000003E 68[E6000000]                    push dword format
    51 00000043 FF15[00000000]                  call [printf]
    52 00000049 83C40C                          add esp, 4*3
    53                                          
    54 0000004C FF35[1A000000]                  push dword [descriptor_fis]
    55 00000052 FF15[00000000]                  call [fclose]
    56 00000058 83C404                          add esp, 4
    57                                  
    58                                          
    59 0000005B B964000000                      mov ecx, len
    60 00000060 FC                              cld
    61 00000061 BE[1E000000]                    mov esi, text
    62 00000066 BF[82000000]                    mov edi, d
    63 0000006B E352                            jecxz final
    64                                          repeta:
    65 0000006D AC                                  lodsb; al<-primul elem text
    66 0000006E 3C30                                cmp al, 30h
    67 00000070 7206                                jb nu
    68 00000072 3C39                                cmp al, 39h
    69 00000074 7702                                ja nu
    70 00000076 B043                                mov al, "C"
    71                                              nu:
    72 00000078 AA                                  stosb
    73 00000079 E2F2                            loop repeta
    74                                          
    75 0000007B 68[82000000]                    push dword d
    76 00000080 68[E6000000]                    push dword format
    77 00000085 FF15[00000000]                  call [printf]
    78 0000008B 83C40C                          add esp, 4*3
    79                                          
    80 0000008E 68[18000000]                    push dword mod_acces2     
    81 00000093 68[0B000000]                    push dword nume_fisier2
    82 00000098 FF15[00000000]                  call [fopen]
    83 0000009E 83C408                          add esp, 4*2 
    84                                          
    85 000000A1 A3[1A000000]                    mov [descriptor_fis], eax
    86                                          
    87 000000A6 83F800                          cmp eax, 0
    88 000000A9 7414                            je final
    89                                          
    90 000000AB 68[1E000000]                    push dword text
    91 000000B0 FF35[1A000000]                  push dword [descriptor_fis]
    92 000000B6 FF15[00000000]                  call [fprintf]
    93 000000BC 83C408                          add esp, 4*2
    94                                  
    95                                  
    96                                  
    97                                          final:
    98                                          ; exit(0)
    99 000000BF 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   100 000000C1 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
