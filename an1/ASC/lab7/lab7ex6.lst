     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll   
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll   
    11                                                              ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  ;Se dau doua numere naturale a si b (a: dword, b: word, definite in segmentul de date). Sa se calculeze a/b si sa se afiseze catul impartirii in urmatorul format: "<a>/<b> = <cat>"
    13                                  ;Exemplu: pentru a = 200 si b = 5 se va afisa: "200/5 = 40"
    14                                  ;Valorile vor fi afisate in format decimal (baza 10) cu semn.
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17 00000000 06000000                    a dd 6
    18 00000004 0400                        b dw 4
    19 00000006 6E72202564202F2025-     	message1  db "nr %d / %d =", 0
    19 0000000F 64203D00           
    20 00000013 2025642000                  message2 db " %d ", 0
    21 00000018 256400                  	format  db "%d", 0  
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ;citim a
    27                                          ;push  dword a    ; punem pe stiva adresa lui a
    28                                          ;push  dword format
    29                                          ;call  [scanf]       ; apelam functia scanf pentru citire
    30                                          ;add  esp, 4 * 2
    31                                          
    32                                          
    33                                          ;citim b
    34                                          ;push  dword b       
    35                                          ;push  dword format
    36                                          ;call  [scanf]       ; apelam functia scanf pentru citire
    37                                          ;add  esp, 4 * 2
    38                                          ;mov bx, [b]
    39                                          ;afisam "a/b="
    40 00000000 66A1[04000000]                  mov ax, [b]
    41 00000006 98                              cwde
    42                                          ;afisam a si b
    43 00000007 50                              push eax
    44 00000008 FF35[00000000]                  push dword [a]
    45 0000000E 68[06000000]                    push dword message1
    46 00000013 FF15[00000000]                  call [printf]
    47 00000019 83C40C                          add esp, 4*3
    48                                         
    49                                          ;a/b
    50 0000001C 668B1D[04000000]                mov bx, [b]
    51 00000023 66A1[00000000]                  mov ax, [a]
    52 00000029 668B15[02000000]                mov dx, [a+2]
    53 00000030 66F7F3                          div bx; ax:dx impartit la bx
    54 00000033 98                              cwde; extindem catul din ax in eax
    55                                          ;mov ax, [b]
    56                                          ;cwde
    57 00000034 50                              push eax
    58                                          ;afisam a/b
    59 00000035 68[13000000]                    push dword message2
    60 0000003A FF15[00000000]                  call [printf]
    61 00000040 83C40C                          add esp, 4*3
    62                                          ; exit(0)
    63 00000043 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    64 00000045 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
